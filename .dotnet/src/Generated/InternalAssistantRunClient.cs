// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;
using OpenAI;

namespace OpenAI.Assistants
{
    public partial class InternalAssistantRunClient
    {
        private readonly Uri _endpoint;
        private const string AuthorizationHeader = "Authorization";
        private readonly ApiKeyCredential _keyCredential;
        private const string AuthorizationApiKeyPrefix = "Bearer";

        protected InternalAssistantRunClient()
        {
        }

        public ClientPipeline Pipeline { get; }

        public virtual ClientResult CreateThreadAndRun(BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateThreadAndRunRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> CreateThreadAndRunAsync(BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateThreadAndRunRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult CreateRun(string thread_id, BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateRunRequest(thread_id, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> CreateRunAsync(string thread_id, BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateRunRequest(thread_id, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult ListRuns(string thread_id, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));

            using PipelineMessage message = CreateListRunsRequest(thread_id, limit, order, after, before, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> ListRunsAsync(string thread_id, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));

            using PipelineMessage message = CreateListRunsRequest(thread_id, limit, order, after, before, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<InternalListRunsResponse> ListRuns(string thread_id, int? limit, RunCollectionOrder? order, string after, string before)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));

            ClientResult result = ListRuns(thread_id, limit, order.ToString(), after, before, null);
            return ClientResult.FromValue((InternalListRunsResponse)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<InternalListRunsResponse>> ListRunsAsync(string thread_id, int? limit, RunCollectionOrder? order, string after, string before)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));

            ClientResult result = await ListRunsAsync(thread_id, limit, order.ToString(), after, before, null).ConfigureAwait(false);
            return ClientResult.FromValue((InternalListRunsResponse)result, result.GetRawResponse());
        }

        public virtual ClientResult GetRun(string thread_id, string run_id, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(run_id, nameof(run_id));

            using PipelineMessage message = CreateGetRunRequest(thread_id, run_id, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> GetRunAsync(string thread_id, string run_id, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(run_id, nameof(run_id));

            using PipelineMessage message = CreateGetRunRequest(thread_id, run_id, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult ModifyRun(string thread_id, string run_id, BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(run_id, nameof(run_id));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateModifyRunRequest(thread_id, run_id, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> ModifyRunAsync(string thread_id, string run_id, BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(run_id, nameof(run_id));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateModifyRunRequest(thread_id, run_id, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult CancelRun(string thread_id, string run_id, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(run_id, nameof(run_id));

            using PipelineMessage message = CreateCancelRunRequest(thread_id, run_id, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> CancelRunAsync(string thread_id, string run_id, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(run_id, nameof(run_id));

            using PipelineMessage message = CreateCancelRunRequest(thread_id, run_id, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult SubmitToolOutputsToRun(string thread_id, string run_id, BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(run_id, nameof(run_id));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateSubmitToolOutputsToRunRequest(thread_id, run_id, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> SubmitToolOutputsToRunAsync(string thread_id, string run_id, BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(run_id, nameof(run_id));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateSubmitToolOutputsToRunRequest(thread_id, run_id, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult ListRunSteps(string thread_id, string run_id, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(run_id, nameof(run_id));

            using PipelineMessage message = CreateListRunStepsRequest(thread_id, run_id, limit, order, after, before, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> ListRunStepsAsync(string thread_id, string run_id, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(run_id, nameof(run_id));

            using PipelineMessage message = CreateListRunStepsRequest(thread_id, run_id, limit, order, after, before, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<InternalListRunStepsResponse> ListRunSteps(string thread_id, string run_id, int? limit, RunStepCollectionOrder? order, string after, string before)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(run_id, nameof(run_id));

            ClientResult result = ListRunSteps(thread_id, run_id, limit, order.ToString(), after, before, null);
            return ClientResult.FromValue((InternalListRunStepsResponse)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<InternalListRunStepsResponse>> ListRunStepsAsync(string thread_id, string run_id, int? limit, RunStepCollectionOrder? order, string after, string before)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(run_id, nameof(run_id));

            ClientResult result = await ListRunStepsAsync(thread_id, run_id, limit, order.ToString(), after, before, null).ConfigureAwait(false);
            return ClientResult.FromValue((InternalListRunStepsResponse)result, result.GetRawResponse());
        }

        public virtual ClientResult GetRunStep(string thread_id, string run_id, string step_id, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(run_id, nameof(run_id));
            Argument.AssertNotNull(step_id, nameof(step_id));

            using PipelineMessage message = CreateGetRunStepRequest(thread_id, run_id, step_id, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> GetRunStepAsync(string thread_id, string run_id, string step_id, RequestOptions options)
        {
            Argument.AssertNotNull(thread_id, nameof(thread_id));
            Argument.AssertNotNull(run_id, nameof(run_id));
            Argument.AssertNotNull(step_id, nameof(step_id));

            using PipelineMessage message = CreateGetRunStepRequest(thread_id, run_id, step_id, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }
    }
}
