// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;
using OpenAI;

namespace OpenAI.Assistants
{
    public partial class InternalAssistantRunClient
    {
        private readonly Uri _endpoint;
        private const string AuthorizationHeader = "Authorization";
        private readonly ApiKeyCredential _keyCredential;
        private const string AuthorizationApiKeyPrefix = "Bearer";

        protected InternalAssistantRunClient()
        {
        }

        public virtual ClientResult ListRuns(string threadId, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNull(threadId, nameof(threadId));

            using PipelineMessage message = CreateListRunsRequest(threadId, limit, order, after, before, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> ListRunsAsync(string threadId, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNull(threadId, nameof(threadId));

            using PipelineMessage message = CreateListRunsRequest(threadId, limit, order, after, before, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<InternalListRunsResponse> ListRuns(string threadId, int? limit, RunCollectionOrder? order, string after, string before)
        {
            Argument.AssertNotNull(threadId, nameof(threadId));

            ClientResult result = ListRuns(threadId, limit, order.ToString(), after, before, null);
            return ClientResult.FromValue((InternalListRunsResponse)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<InternalListRunsResponse>> ListRunsAsync(string threadId, int? limit, RunCollectionOrder? order, string after, string before)
        {
            Argument.AssertNotNull(threadId, nameof(threadId));

            ClientResult result = await ListRunsAsync(threadId, limit, order.ToString(), after, before, null).ConfigureAwait(false);
            return ClientResult.FromValue((InternalListRunsResponse)result, result.GetRawResponse());
        }

        public virtual ClientResult ListRunSteps(string threadId, string runId, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNull(threadId, nameof(threadId));
            Argument.AssertNotNull(runId, nameof(runId));

            using PipelineMessage message = CreateListRunStepsRequest(threadId, runId, limit, order, after, before, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> ListRunStepsAsync(string threadId, string runId, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNull(threadId, nameof(threadId));
            Argument.AssertNotNull(runId, nameof(runId));

            using PipelineMessage message = CreateListRunStepsRequest(threadId, runId, limit, order, after, before, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<InternalListRunStepsResponse> ListRunSteps(string threadId, string runId, int? limit, RunStepCollectionOrder? order, string after, string before)
        {
            Argument.AssertNotNull(threadId, nameof(threadId));
            Argument.AssertNotNull(runId, nameof(runId));

            ClientResult result = ListRunSteps(threadId, runId, limit, order.ToString(), after, before, null);
            return ClientResult.FromValue((InternalListRunStepsResponse)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<InternalListRunStepsResponse>> ListRunStepsAsync(string threadId, string runId, int? limit, RunStepCollectionOrder? order, string after, string before)
        {
            Argument.AssertNotNull(threadId, nameof(threadId));
            Argument.AssertNotNull(runId, nameof(runId));

            ClientResult result = await ListRunStepsAsync(threadId, runId, limit, order.ToString(), after, before, null).ConfigureAwait(false);
            return ClientResult.FromValue((InternalListRunStepsResponse)result, result.GetRawResponse());
        }
    }
}
