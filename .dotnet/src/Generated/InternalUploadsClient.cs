// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;
using OpenAI;

namespace OpenAI.Files
{
    public partial class InternalUploadsClient
    {
        private readonly Uri _endpoint;
        private const string AuthorizationHeader = "Authorization";
        private readonly ApiKeyCredential _keyCredential;
        private const string AuthorizationApiKeyPrefix = "Bearer";

        protected InternalUploadsClient()
        {
        }

        public ClientPipeline Pipeline { get; }

        public virtual ClientResult CreateUpload(BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateUploadRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> CreateUploadAsync(BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateUploadRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<InternalUpload> CreateUpload(InternalCreateUploadRequest requestBody)
        {
            Argument.AssertNotNull(requestBody, nameof(requestBody));

            ClientResult result = CreateUpload(requestBody, null);
            return ClientResult.FromValue((InternalUpload)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<InternalUpload>> CreateUploadAsync(InternalCreateUploadRequest requestBody)
        {
            Argument.AssertNotNull(requestBody, nameof(requestBody));

            ClientResult result = await CreateUploadAsync(requestBody, null).ConfigureAwait(false);
            return ClientResult.FromValue((InternalUpload)result, result.GetRawResponse());
        }

        public virtual ClientResult AddUploadPart(string upload_id, BinaryContent content, string contentType, RequestOptions options)
        {
            Argument.AssertNotNull(upload_id, nameof(upload_id));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddUploadPartRequest(upload_id, content, contentType, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> AddUploadPartAsync(string upload_id, BinaryContent content, string contentType, RequestOptions options)
        {
            Argument.AssertNotNull(upload_id, nameof(upload_id));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateAddUploadPartRequest(upload_id, content, contentType, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult CompleteUpload(string upload_id, BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(upload_id, nameof(upload_id));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCompleteUploadRequest(upload_id, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> CompleteUploadAsync(string upload_id, BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(upload_id, nameof(upload_id));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCompleteUploadRequest(upload_id, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<InternalUpload> CompleteUpload(string upload_id, InternalCompleteUploadRequest requestBody)
        {
            Argument.AssertNotNull(upload_id, nameof(upload_id));
            Argument.AssertNotNull(requestBody, nameof(requestBody));

            ClientResult result = CompleteUpload(upload_id, requestBody, null);
            return ClientResult.FromValue((InternalUpload)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<InternalUpload>> CompleteUploadAsync(string upload_id, InternalCompleteUploadRequest requestBody)
        {
            Argument.AssertNotNull(upload_id, nameof(upload_id));
            Argument.AssertNotNull(requestBody, nameof(requestBody));

            ClientResult result = await CompleteUploadAsync(upload_id, requestBody, null).ConfigureAwait(false);
            return ClientResult.FromValue((InternalUpload)result, result.GetRawResponse());
        }

        public virtual ClientResult CancelUpload(string upload_id, RequestOptions options)
        {
            Argument.AssertNotNull(upload_id, nameof(upload_id));

            using PipelineMessage message = CreateCancelUploadRequest(upload_id, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> CancelUploadAsync(string upload_id, RequestOptions options)
        {
            Argument.AssertNotNull(upload_id, nameof(upload_id));

            using PipelineMessage message = CreateCancelUploadRequest(upload_id, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<InternalUpload> CancelUpload(string upload_id)
        {
            Argument.AssertNotNull(upload_id, nameof(upload_id));

            ClientResult result = CancelUpload(upload_id, null);
            return ClientResult.FromValue((InternalUpload)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<InternalUpload>> CancelUploadAsync(string upload_id)
        {
            Argument.AssertNotNull(upload_id, nameof(upload_id));

            ClientResult result = await CancelUploadAsync(upload_id, null).ConfigureAwait(false);
            return ClientResult.FromValue((InternalUpload)result, result.GetRawResponse());
        }
    }
}
