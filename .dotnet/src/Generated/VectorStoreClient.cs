// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;
using OpenAI;

namespace OpenAI.VectorStores
{
    public partial class VectorStoreClient
    {
        private readonly Uri _endpoint;
        private const string AuthorizationHeader = "Authorization";
        private readonly ApiKeyCredential _keyCredential;
        private const string AuthorizationApiKeyPrefix = "Bearer";

        protected VectorStoreClient()
        {
        }

        public ClientPipeline Pipeline { get; }

        public virtual ClientResult ListVectorStores(int? limit, string order, string after, string before, RequestOptions options)
        {
            using PipelineMessage message = CreateListVectorStoresRequest(limit, order, after, before, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> ListVectorStoresAsync(int? limit, string order, string after, string before, RequestOptions options)
        {
            using PipelineMessage message = CreateListVectorStoresRequest(limit, order, after, before, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<InternalListVectorStoresResponse> ListVectorStores(int? limit, VectorStoreCollectionOrder? order, string after, string before)
        {
            ClientResult result = ListVectorStores(limit, order.ToString(), after, before, null);
            return ClientResult.FromValue((InternalListVectorStoresResponse)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<InternalListVectorStoresResponse>> ListVectorStoresAsync(int? limit, VectorStoreCollectionOrder? order, string after, string before)
        {
            ClientResult result = await ListVectorStoresAsync(limit, order.ToString(), after, before, null).ConfigureAwait(false);
            return ClientResult.FromValue((InternalListVectorStoresResponse)result, result.GetRawResponse());
        }

        public virtual ClientResult CreateVectorStore(BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateVectorStoreRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> CreateVectorStoreAsync(BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateVectorStoreRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult GetVectorStore(string vector_store_id, RequestOptions options)
        {
            Argument.AssertNotNull(vector_store_id, nameof(vector_store_id));

            using PipelineMessage message = CreateGetVectorStoreRequest(vector_store_id, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> GetVectorStoreAsync(string vector_store_id, RequestOptions options)
        {
            Argument.AssertNotNull(vector_store_id, nameof(vector_store_id));

            using PipelineMessage message = CreateGetVectorStoreRequest(vector_store_id, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult ModifyVectorStore(string vector_store_id, BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(vector_store_id, nameof(vector_store_id));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateModifyVectorStoreRequest(vector_store_id, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> ModifyVectorStoreAsync(string vector_store_id, BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(vector_store_id, nameof(vector_store_id));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateModifyVectorStoreRequest(vector_store_id, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult DeleteVectorStore(string vector_store_id, RequestOptions options)
        {
            Argument.AssertNotNull(vector_store_id, nameof(vector_store_id));

            using PipelineMessage message = CreateDeleteVectorStoreRequest(vector_store_id, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> DeleteVectorStoreAsync(string vector_store_id, RequestOptions options)
        {
            Argument.AssertNotNull(vector_store_id, nameof(vector_store_id));

            using PipelineMessage message = CreateDeleteVectorStoreRequest(vector_store_id, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult ListVectorStoreFiles(string vector_store_id, int? limit, string order, string after, string before, string filter, RequestOptions options)
        {
            Argument.AssertNotNull(vector_store_id, nameof(vector_store_id));

            using PipelineMessage message = CreateListVectorStoreFilesRequest(vector_store_id, limit, order, after, before, filter, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> ListVectorStoreFilesAsync(string vector_store_id, int? limit, string order, string after, string before, string filter, RequestOptions options)
        {
            Argument.AssertNotNull(vector_store_id, nameof(vector_store_id));

            using PipelineMessage message = CreateListVectorStoreFilesRequest(vector_store_id, limit, order, after, before, filter, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<InternalListVectorStoreFilesResponse> ListVectorStoreFiles(string vector_store_id, int? limit, VectorStoreFileAssociationCollectionOrder? order, string after, string before, VectorStoreFileStatusFilter? filter)
        {
            Argument.AssertNotNull(vector_store_id, nameof(vector_store_id));

            ClientResult result = ListVectorStoreFiles(vector_store_id, limit, order.ToString(), after, before, filter.ToString(), null);
            return ClientResult.FromValue((InternalListVectorStoreFilesResponse)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<InternalListVectorStoreFilesResponse>> ListVectorStoreFilesAsync(string vector_store_id, int? limit, VectorStoreFileAssociationCollectionOrder? order, string after, string before, VectorStoreFileStatusFilter? filter)
        {
            Argument.AssertNotNull(vector_store_id, nameof(vector_store_id));

            ClientResult result = await ListVectorStoreFilesAsync(vector_store_id, limit, order.ToString(), after, before, filter.ToString(), null).ConfigureAwait(false);
            return ClientResult.FromValue((InternalListVectorStoreFilesResponse)result, result.GetRawResponse());
        }

        public virtual ClientResult ListFilesInVectorStoreBatch(string vector_store_id, string batch_id, int? limit, string order, string after, string before, string filter, RequestOptions options)
        {
            Argument.AssertNotNull(vector_store_id, nameof(vector_store_id));
            Argument.AssertNotNull(batch_id, nameof(batch_id));

            using PipelineMessage message = CreateListFilesInVectorStoreBatchRequest(vector_store_id, batch_id, limit, order, after, before, filter, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> ListFilesInVectorStoreBatchAsync(string vector_store_id, string batch_id, int? limit, string order, string after, string before, string filter, RequestOptions options)
        {
            Argument.AssertNotNull(vector_store_id, nameof(vector_store_id));
            Argument.AssertNotNull(batch_id, nameof(batch_id));

            using PipelineMessage message = CreateListFilesInVectorStoreBatchRequest(vector_store_id, batch_id, limit, order, after, before, filter, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<InternalListVectorStoreFilesResponse> ListFilesInVectorStoreBatch(string vector_store_id, string batch_id, int? limit, InternalListFilesInVectorStoreBatchRequestOrder? order, string after, string before, VectorStoreFileStatusFilter? filter)
        {
            Argument.AssertNotNull(vector_store_id, nameof(vector_store_id));
            Argument.AssertNotNull(batch_id, nameof(batch_id));

            ClientResult result = ListFilesInVectorStoreBatch(vector_store_id, batch_id, limit, order.ToString(), after, before, filter.ToString(), null);
            return ClientResult.FromValue((InternalListVectorStoreFilesResponse)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<InternalListVectorStoreFilesResponse>> ListFilesInVectorStoreBatchAsync(string vector_store_id, string batch_id, int? limit, InternalListFilesInVectorStoreBatchRequestOrder? order, string after, string before, VectorStoreFileStatusFilter? filter)
        {
            Argument.AssertNotNull(vector_store_id, nameof(vector_store_id));
            Argument.AssertNotNull(batch_id, nameof(batch_id));

            ClientResult result = await ListFilesInVectorStoreBatchAsync(vector_store_id, batch_id, limit, order.ToString(), after, before, filter.ToString(), null).ConfigureAwait(false);
            return ClientResult.FromValue((InternalListVectorStoreFilesResponse)result, result.GetRawResponse());
        }
    }
}
