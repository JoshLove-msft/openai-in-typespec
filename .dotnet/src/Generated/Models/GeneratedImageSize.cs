// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace OpenAI.Images
{
    public readonly partial struct GeneratedImageSize : IEquatable<GeneratedImageSize>
    {
        private readonly string _value;
        private const string _256x256Value = "256x256";
        private const string _512x512Value = "512x512";
        private const string _1024x1024Value = "1024x1024";
        private const string _1792x1024Value = "1792x1024";
        private const string _1024x1792Value = "1024x1792";

        public static GeneratedImageSize _256x256 { get; } = new GeneratedImageSize(_256x256Value);

        public static GeneratedImageSize _512x512 { get; } = new GeneratedImageSize(_512x512Value);

        public static GeneratedImageSize _1024x1024 { get; } = new GeneratedImageSize(_1024x1024Value);

        public static GeneratedImageSize _1792x1024 { get; } = new GeneratedImageSize(_1792x1024Value);

        public static GeneratedImageSize _1024x1792 { get; } = new GeneratedImageSize(_1024x1792Value);

        public static bool operator ==(GeneratedImageSize left, GeneratedImageSize right) => left.Equals(right);

        public static bool operator !=(GeneratedImageSize left, GeneratedImageSize right) => !left.Equals(right);

        public static implicit operator GeneratedImageSize(string value) => new GeneratedImageSize(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is GeneratedImageSize other && Equals(other);

        public bool Equals(GeneratedImageSize other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
