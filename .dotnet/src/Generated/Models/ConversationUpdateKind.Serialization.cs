// <auto-generated/>

#nullable disable

using System;

namespace OpenAI.RealtimeConversation
{
    internal static partial class ConversationUpdateKindExtensions
    {
        public static string ToSerialString(this RealtimeConversation.ConversationUpdateKind value) => value switch
        {
            RealtimeConversation.ConversationUpdateKind.SessionStarted => "session.created",
            RealtimeConversation.ConversationUpdateKind.SessionConfigured => "session.updated",
            RealtimeConversation.ConversationUpdateKind.ItemAcknowledged => "conversation.item.created",
            RealtimeConversation.ConversationUpdateKind.ItemDeleted => "conversation.item.deleted",
            RealtimeConversation.ConversationUpdateKind.ItemTruncated => "conversation.item.truncated",
            RealtimeConversation.ConversationUpdateKind.ResponseStarted => "response.created",
            RealtimeConversation.ConversationUpdateKind.ResponseFinished => "response.done",
            RealtimeConversation.ConversationUpdateKind.RateLimitsUpdated => "rate_limits.updated",
            RealtimeConversation.ConversationUpdateKind.ItemStarted => "response.output_item.added",
            RealtimeConversation.ConversationUpdateKind.ItemFinished => "response.output_item.done",
            RealtimeConversation.ConversationUpdateKind.ContentPartStarted => "response.content_part.added",
            RealtimeConversation.ConversationUpdateKind.ContentPartFinished => "response.content_part.done",
            RealtimeConversation.ConversationUpdateKind.ResponseAudioDelta => "response.audio.delta",
            RealtimeConversation.ConversationUpdateKind.ResponseAudioDone => "response.audio.done",
            RealtimeConversation.ConversationUpdateKind.ResponseAudioTranscriptDelta => "response.audio_transcript.delta",
            RealtimeConversation.ConversationUpdateKind.ResponseAudioTranscriptDone => "response.audio_transcript.done",
            RealtimeConversation.ConversationUpdateKind.ResponseTextDelta => "response.text.delta",
            RealtimeConversation.ConversationUpdateKind.ResponseTextDone => "response.text.done",
            RealtimeConversation.ConversationUpdateKind.ResponseFunctionCallArgumentsDelta => "response.function_call_arguments.delta",
            RealtimeConversation.ConversationUpdateKind.ResponseFunctionCallArgumentsDone => "response.function_call_arguments.done",
            RealtimeConversation.ConversationUpdateKind.InputAudioBufferSpeechStarted => "input_audio_buffer.speech_started",
            RealtimeConversation.ConversationUpdateKind.InputAudioBufferSpeechStopped => "input_audio_buffer.speech_stopped",
            RealtimeConversation.ConversationUpdateKind.ItemInputAudioTranscriptionCompleted => "conversation.item.input_audio_transcription.completed",
            RealtimeConversation.ConversationUpdateKind.ItemInputAudioTranscriptionFailed => "conversation.item.input_audio_transcription.failed",
            RealtimeConversation.ConversationUpdateKind.InputAudioBufferCommitted => "input_audio_buffer.committed",
            RealtimeConversation.ConversationUpdateKind.InputAudioBufferCleared => "input_audio_buffer.cleared",
            RealtimeConversation.ConversationUpdateKind.Error => "error",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ConversationUpdateKind value.")
        };

        public static RealtimeConversation.ConversationUpdateKind ToConversationUpdateKind(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "session.created"))
            {
                return RealtimeConversation.ConversationUpdateKind.SessionStarted;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "session.updated"))
            {
                return RealtimeConversation.ConversationUpdateKind.SessionConfigured;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "conversation.item.created"))
            {
                return RealtimeConversation.ConversationUpdateKind.ItemAcknowledged;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "conversation.item.deleted"))
            {
                return RealtimeConversation.ConversationUpdateKind.ItemDeleted;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "conversation.item.truncated"))
            {
                return RealtimeConversation.ConversationUpdateKind.ItemTruncated;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "response.created"))
            {
                return RealtimeConversation.ConversationUpdateKind.ResponseStarted;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "response.done"))
            {
                return RealtimeConversation.ConversationUpdateKind.ResponseFinished;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "rate_limits.updated"))
            {
                return RealtimeConversation.ConversationUpdateKind.RateLimitsUpdated;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "response.output_item.added"))
            {
                return RealtimeConversation.ConversationUpdateKind.ItemStarted;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "response.output_item.done"))
            {
                return RealtimeConversation.ConversationUpdateKind.ItemFinished;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "response.content_part.added"))
            {
                return RealtimeConversation.ConversationUpdateKind.ContentPartStarted;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "response.content_part.done"))
            {
                return RealtimeConversation.ConversationUpdateKind.ContentPartFinished;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "response.audio.delta"))
            {
                return RealtimeConversation.ConversationUpdateKind.ResponseAudioDelta;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "response.audio.done"))
            {
                return RealtimeConversation.ConversationUpdateKind.ResponseAudioDone;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "response.audio_transcript.delta"))
            {
                return RealtimeConversation.ConversationUpdateKind.ResponseAudioTranscriptDelta;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "response.audio_transcript.done"))
            {
                return RealtimeConversation.ConversationUpdateKind.ResponseAudioTranscriptDone;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "response.text.delta"))
            {
                return RealtimeConversation.ConversationUpdateKind.ResponseTextDelta;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "response.text.done"))
            {
                return RealtimeConversation.ConversationUpdateKind.ResponseTextDone;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "response.function_call_arguments.delta"))
            {
                return RealtimeConversation.ConversationUpdateKind.ResponseFunctionCallArgumentsDelta;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "response.function_call_arguments.done"))
            {
                return RealtimeConversation.ConversationUpdateKind.ResponseFunctionCallArgumentsDone;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "input_audio_buffer.speech_started"))
            {
                return RealtimeConversation.ConversationUpdateKind.InputAudioBufferSpeechStarted;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "input_audio_buffer.speech_stopped"))
            {
                return RealtimeConversation.ConversationUpdateKind.InputAudioBufferSpeechStopped;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "conversation.item.input_audio_transcription.completed"))
            {
                return RealtimeConversation.ConversationUpdateKind.ItemInputAudioTranscriptionCompleted;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "conversation.item.input_audio_transcription.failed"))
            {
                return RealtimeConversation.ConversationUpdateKind.ItemInputAudioTranscriptionFailed;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "input_audio_buffer.committed"))
            {
                return RealtimeConversation.ConversationUpdateKind.InputAudioBufferCommitted;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "input_audio_buffer.cleared"))
            {
                return RealtimeConversation.ConversationUpdateKind.InputAudioBufferCleared;
            }
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "error"))
            {
                return RealtimeConversation.ConversationUpdateKind.Error;
            }
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ConversationUpdateKind value.");
        }
    }
}
