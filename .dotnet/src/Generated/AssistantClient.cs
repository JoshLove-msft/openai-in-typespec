// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;
using OpenAI;

namespace OpenAI.Assistants
{
    public partial class AssistantClient
    {
        private readonly Uri _endpoint;
        private const string AuthorizationHeader = "Authorization";
        private readonly ApiKeyCredential _keyCredential;
        private const string AuthorizationApiKeyPrefix = "Bearer";

        protected AssistantClient()
        {
        }

        public ClientPipeline Pipeline { get; }

        public virtual ClientResult ListAssistants(int? limit, string order, string after, string before, RequestOptions options)
        {
            using PipelineMessage message = CreateListAssistantsRequest(limit, order, after, before, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> ListAssistantsAsync(int? limit, string order, string after, string before, RequestOptions options)
        {
            using PipelineMessage message = CreateListAssistantsRequest(limit, order, after, before, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<Assistant> GetAssistant(string assistantId)
        {
            Argument.AssertNotNull(assistantId, nameof(assistantId));

            ClientResult result = this.GetAssistant(assistantId, null);
            return ClientResult.FromValue((Assistant)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<Assistant>> GetAssistantAsync(string assistantId)
        {
            Argument.AssertNotNull(assistantId, nameof(assistantId));

            ClientResult result = await this.GetAssistantAsync(assistantId, null).ConfigureAwait(false);
            return ClientResult.FromValue((Assistant)result, result.GetRawResponse());
        }
    }
}
